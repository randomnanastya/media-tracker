name: Release and Docker Build

on:
  push:
    branches: [main]

jobs:
  yaml-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Lint YAML files
        run: yamllint . --strict

  lint:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install Poetry
        run: pip install poetry
      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: ${{ runner.os }}-poetry-
      - name: Install dev dependencies
        run: poetry install --no-root --with dev
      - name: Run Ruff
        uses: astral-sh/ruff-action@v3
        with:
          args: "check ."
          src: "."
      - name: Run Black
        run: poetry run black --check .
      - name: Run MyPy
        run: poetry run mypy --explicit-package-bases app

  check-squash-commit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Check squash commit message
        uses: gsactions/commit-message-checker@v2
        with:
          pattern: '^(feat|fix|docs|chore|test|style|refactor)(\([a-z0-9-]+\))?: .+$'
          error: >
            'Squash commit message must follow Conventional Commits format
            (e.g., "feat: add new endpoint" or "fix(api): update logic")'
          checkLatest: true

  unit-tests:
    runs-on: ubuntu-latest
    needs: lint
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install Poetry
        run: pip install poetry
      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: ${{ runner.os }}-poetry-
      - name: Install dependencies (no-root)
        run: poetry install --no-root
      - name: Run unit tests
        run: |
          export PYTHONPATH=$(pwd)
          poetry run pytest tests/units -v --cov=app --cov-report=xml

  integration-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    defaults:
      run:
        working-directory: backend
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install system dependencies
        run: sudo apt-get update && sudo apt-get install -y build-essential libpq-dev
      - name: Install Poetry
        run: pip install poetry
      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: ${{ runner.os }}-poetry-
      - name: Install dependencies
        run: poetry install
      - name: Wait for Postgres
        run: |
          until pg_isready -h localhost -p 5432; do
            echo "Waiting for postgres..."
            sleep 2
          done
      - name: Run integration tests
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test
          APP_ENV: testing
        run: poetry run pytest tests/integration -v --cov=app --cov-report=xml

  semantic-release:
    permissions:
      contents: write
      issues: write
      pull-requests: write
    needs: [yaml-lint, lint, unit-tests, integration-tests, check-squash-commit]
    runs-on: ubuntu-latest
    outputs:
      new_release_version: ${{ steps.semantic-release.outputs.new_release_version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node.js for semantic-release
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install semantic-release
        run: >
          npm install semantic-release @semantic-release/commit-analyzer @semantic-release/release-notes-generator
          @semantic-release/changelog @semantic-release/github @semantic-release/git
      - name: Run semantic-release
        id: semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.SEMANTIC_RELEASE_TOKEN }}
        run: npx semantic-release
      - name: Debug tags
        run: |
          echo "Available tags:"
          git tag -l
          echo "Latest tag:"
          git describe --tags --abbrev=0 || echo "No tags found"

  build-and-push-docker:
    needs: semantic-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:${{ needs.semantic-release.outputs.new_release_version }}
            ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:latest
