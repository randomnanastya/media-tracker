name: Backend CI

on:
  push:
    branches:
      - main
#    paths:
#      - 'backend/**'
  pull_request:
    branches:
      - main
      - 'MTB-*'
#    paths:
#      - 'backend/**'

jobs:
  # -------------------------------
  # 1. linter
  # ----------------------------
  check-branch:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Run Ruff
        uses: astral-sh/ruff-action@v3
        with:
          args: "check backend --config backend/pyproject.toml"

      - name: Check branch name
        run: |
          BRANCH=$(echo "${GITHUB_HEAD_REF:-$GITHUB_REF_NAME}" | sed 's|refs/heads/||')
          if [[ ! "$BRANCH" =~ ^MTB-[0-9]+[A-Za-z0-9-]*$ ]]; then
            echo "Invalid branch name: $BRANCH. Must match MTB-<number><letters/numbers/dash/->"
            exit 1
          fi
  # -------------------------------
  # 1. linter
  # ----------------------------
  lint:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Poetry
        run: pip install poetry

      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: ${{ runner.os }}-poetry-

      - name: Install dev dependencies
        run: poetry install --with dev  # ruff, black, mypy и пр.

      - name: Run Ruff
        run: poetry run ruff check .

      - name: Run Black
        run: poetry run black --check .

      - name: Run MyPy
        run: poetry run mypy app

  # -------------------------------
  # 1. Unit tests
  # ----------------------------
  unit-tests:
    runs-on: ubuntu-latest
    needs: lint
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Poetry
        run: pip install poetry

      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: ${{ runner.os }}-poetry-

      - name: Install dependencies (no-root)
        run: poetry install --no-root  # только зависимости, без установки пакета

      - name: Run unit tests
        run: |
          export PYTHONPATH=$(pwd)
          poetry run pytest tests/units -v --cov=app --cov-report=xml
  # -------------------------------
  # 2. Integration tests
  # -------------------------------
  integration-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    defaults:
      run:
        working-directory: backend
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install system dependencies
        run: sudo apt-get update && sudo apt-get install -y build-essential libpq-dev

      - name: Install Poetry
        run: pip install poetry

      - name: Install dependencies
        run: poetry install

      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: ${{ runner.os }}-poetry-

      - name: Install dependencies
        run: poetry install

      - name: Wait for Postgres
        run: |
          until pg_isready -h localhost -p 5432; do
            echo "Waiting for postgres..."
            sleep 2
          done

      - name: Run integration tests
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test
          APP_ENV: testing
        run: poetry run pytest tests/integration -v --cov=app --cov-report=xml
